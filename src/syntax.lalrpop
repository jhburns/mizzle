use std::str::FromStr;

use crate::ast::{Span, SpanExpr, SpanType, Expr, Type};

grammar;

pub Term: Box<SpanExpr> = {
    <lo:@L> <b:Bool> <hi:@R> => Box::new(Expr::BoolLit(Span(lo, hi), b)),
    <lo:@L> <n:Int> <hi:@R> => Box::new(Expr::IntLit(Span(lo, hi), n)), 
    <lo:@L> <term:Term> ":" <ty:TypeName> <hi:@R> => Box::new(Expr::TypeAnno { extra: Span(lo, hi), term, ty }),
    <lo:@L> "if" <cond:Term> "then" <on_true:Term> "else" <on_false:Term> "end" <hi:@R> =>
        Box::new(Expr::IfFlow { extra: Span(lo, hi), cond, on_true, on_false }), 
    "(" <t:Term> ")" => t,
};

pub TypeName: SpanType = {
    <lo:@L> "bool" <hi:@R> => Type::Bool(Span(lo, hi)),
    <lo:@L> "int" <hi:@R> => Type::Int(Span(lo, hi)),
};

Bool: bool = r"true|false" => bool::from_str(<>).unwrap();
Int: i64 = r"-?[0-9]+" =>? i64::from_str(<>)
    .map_err(|_| lalrpop_util::ParseError::User { error: "Integer literal is outside of integer range" });